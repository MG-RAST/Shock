package main

import (
	"http"
	"flag"
	"fmt"
	"strconv"
	"gorilla.googlecode.com/hg/gorilla/mux"
)

// Command line options
var (
	port = flag.Int("port", 8000, "the port to listen on")
)

func nodeHandler(res http.ResponseWriter, req *http.Request) {
	params := mux.Vars(req)
	query := req.URL.Query()

	// GET
	// /node/{id} 
	//           ?download[&index={index}[&part={part}]]
	//           ?pipe(&{func}={funcOptions})+)
	//           ?list={indexes||functions||parts&index={index}...}
	// /node
	//           ?paginate[&limit={limit}&offset={offset}]
	//           ?query={queryString}[&paginate[&limit={limit}&offset={offset}]]
	
	// POST
	// /node/{id}
	//           ?pipe(&{func}={funcOptions})+
	//           ?index={type}[&options={options}]
	//           ?attributes 
	//            -> multipart-form or json file as body
	//           ?file[&part={part}] 
	//            -> multipart-form or data file as body
	// /node
	//       multipart-form containing: data file and/or attributes (json file)
	//       empty body

	// PUT
	//     Are nodes mutable?   

	fmt.Println(params)
	for key, arr := range query { 
		for i := range arr {
			fmt.Println(key, arr[i])
		}
	}			
	res.Header().Set("Content-Type", "text/plain")
	res.Write([]byte("Goodbye world." + req.RawURL + "\n"))
}

func handler(res http.ResponseWriter, req *http.Request) {
	res.Header().Set("Content-Type", "text/plain")
	res.Write([]byte("Goodbye world." + req.RawURL + "\n"))
} 

func main() {
	flag.Parse()
	
	r := new(mux.Router)
	r.HandleFunc("/node/{id}/", handler).Methods("GET", "POST")
	r.HandleFunc("/node/{id}", handler).Methods("GET", "POST")
	r.HandleFunc("/node/", handler).Methods("GET", "POST")
	r.HandleFunc("/node", handler).Methods("GET", "POST")
	r.HandleFunc("/", handler).Methods("GET")

	http.Handle("/", r)
	
	if err := http.ListenAndServe(":"+strconv.Itoa(*port), nil); err != nil {
		fmt.Println("Could not start server:", err)
	}
}

